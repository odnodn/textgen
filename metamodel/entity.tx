

EntityModel:
    (elements+=PackageDeclaration)*;

AbstractElement:
    PackageDeclaration | Type | Import;

PackageDeclaration:
    'package' name=QualifiedName '{'
        (elements+=AbstractElement)*
    '}';

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;

QualifiedNameWithWildcard:
    QualifiedName '.*'?;

QualifiedName:
    ID ('.' ID)*;

EntityModelOld:
    types*=SimpleType       // At the beginning of model we can define
    enums+=Enum
    entities+=Entity        // Each model has one or more entities.
;

cls:
       ('extends' superType=[Entity|QualifiedName])? '{'
        properties+=Property // Each entity has one or more properties.
    '}'
;

Entity:  (abs?='abs')? 'entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'
                                 properties+=Property // Each entity has one or more properties.
                             '}';

AbsEntity : 'abs_entity' name=ID ('extends' superType=[Entity|QualifiedName])? '{'
                                         properties+=Property // Each entity has one or more properties.
                                     '}';

defValue:  STRING|INT;

Validator:
	name='min' ':' value=INT|
	name='max' ':' value=INT|
	name= 'requiredFalse'|
	name = 'future'|
	name = 'past'  |
	name='pattern' ':' svalue=STRING  ;

Property:
    name=ID ':' type=[Type] ('='defaultVal=defValue)?   (opt?='opt')? (many?='many')?  (embedded?='embedded')?  (ref?='ref')?  (unique?='unique')?  (bi?='bi')? (renderDropdown?='renderDropdown')
     (validators+=Validator)*
;

// Type can be SimpleType or Entity
Type:
    SimpleType | Entity  | Enum
;

SimpleType:
    'type' name=ID
;

EnumLiteral: name=ID ;

Enum: 'enum' name=ID '{'
        literals+=EnumLiteral  // Each entity has one or more properties.
    '}'
;


// Special rule for comments. Comments start with //
Comment:
    /\/\/.*$/
;
