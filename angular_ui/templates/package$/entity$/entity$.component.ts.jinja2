
import { BaseWizardStep } from '@app/base/base-wizardstep';
import {Component, EventEmitter, OnInit, Output} from '@angular/core';
import { Validators, FormGroup, FormBuilder, FormArray } from '@angular/forms';


{% macro genFormControls(entity) %}
    {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : ['', [ {% if not prop.opt %} Validators.required {% endif %}]],
    {% endfor %}
    {% for prop in genUtils.getContained(entity) -%}
        {{ prop.name }} : this.fb.array([ this.create{{ prop.name | fUpper }}Controls() ])
    {% endfor %}
{%  endmacro %}


{% autoescape false %}

{% set cname = (entity.parent.name|fLower ) + '-' + (entity.name |fLower )  %}

@Component({
selector: '{{cname}}',
templateUrl: './{{lname}}.component.html',
styleUrls: ['./{{lname}}.component.css']
})
export class {{name}}Component  extends BaseEditComponent<{{entityNameTODO}}> implements OnInit {

    {{lname}}: {{name}};
    errorMessage: string;
    public {{ entity.name | fLower }}Form: FormGroup;

    {% for prop in genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : {{ prop.type.name }}[]
    {% endfor %}


    constructor(protected {{lname}}Service: {{name}}Service, protected route:ActivatedRoute, protected router: Router, private fb: FormBuilder) {
        super({{lname}}Service, route, router, '{{lname}}s')
        this.createForm();
    }

    {% set formName = 'this.' +  (entity.name | fLower ) +'Form'  %}

    private createForm(): void {
        {{ formName }}= this.fb.group({
        {{ genFormControls(entity) }}
        });
    }

    {% for prop in genUtils.getContained(entity) -%}
    create{{ prop.name | fUpper }}Controls(){
        return this.fb.group({
        {{ genFormControls(prop.type) }}
            });
    }
    {% endfor %}

    {% for prop in genUtils.getContained(entity) -%}
        add{{  prop.name | fUpper }}(): void {
            ({{ formName }}.get('{{ prop.name }}') as FormArray).push(this.create{{ prop.name | fUpper }}Controls());
        }

        remove{{  prop.name | fUpper }}(index:number){
            ({{ formName }}.get('{{ prop.name }}') as FormArray ).removeAt(index);
        }
    {% endfor %}

    submit(){
        Object.keys({{ formName }}.controls).forEach(field =>
            {{ formName }}.get(field).markAsTouched()
        );
        console.log({{ formName }}.value)
        //console.log("entity", this.entity)
        super.onSubmit(this.entity);
    }

}


{% endautoescape %}