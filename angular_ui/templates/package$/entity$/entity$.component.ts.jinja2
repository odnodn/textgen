
import { BaseWizardStep } from '@app/base/base-wizardstep';
import {Component, EventEmitter, OnInit, Output} from '@angular/core';
import { Validators, FormGroup, FormBuilder, FormArray } from '@angular/forms';

{%  macro getValidators(prop) %}
    {% if not prop.opt %} Validators.required, {% endif %}
    {% for v in prop.validators %}
        {% if  v.name in ['requiredFalse','future','past'] %} CustomValidators.{{ v.name }}, {% endif %}
        {% if  v.name == 'min' or  v.name == 'max' %}
            Validators.{{ v.name }}Lenght({{  v.value }}),
        {% endif %}
    {% endfor %}
{% endmacro %}


{% macro genFormControls(entity) %}
    {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : ['', [  {{ getValidators(prop) }} ]],
    {% endfor %}
    {% for prop in genUtils.getContained(entity) -%}
        {{ prop.name }} : this.fb.array([ this.create{{ prop.name | fUpper }}Controls() ])
    {% endfor %}
{%  endmacro %}


{% autoescape false %}

{% set cname = (entity.parent.name|fLower ) + '-' + (entity.name |fLower )  %}

@Component({
selector: '{{cname}}',
templateUrl: './{{lname}}.component.html',
styleUrls: ['./{{lname}}.component.css']
})
export class {{name}}Component  extends BaseWizardStep<{{entityNameTODO}}> implements OnInit {

    public {{ entity.name | fLower }}Form: FormGroup;

    {% for prop in genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : {{ prop.type.name }}[]
    {% endfor %}

    ngOnInit(){}


    constructor(private fb: FormBuilder) {
        super()
        this.createForm();
    }

    {% set formName = 'this.' +  (entity.name | fLower ) +'Form'  %}

    private createForm(): void {
        {{ formName }}= this.fb.group({
        {{ genFormControls(entity) }}
        });
    }

    {% for prop in genUtils.getContained(entity) -%}
    create{{ prop.name | fUpper }}Controls(){
        return this.fb.group({
        {{ genFormControls(prop.type) }}
            });
    }
    {% endfor %}

    {% for prop in genUtils.getContained(entity) -%}
        add{{  prop.name | fUpper }}(): void {
            ({{ formName }}.get('{{ prop.name }}') as FormArray).push(this.create{{ prop.name | fUpper }}Controls());
        }

        remove{{  prop.name | fUpper }}(index:number){
            ({{ formName }}.get('{{ prop.name }}') as FormArray ).removeAt(index);
        }
    {% endfor %}



}


{% endautoescape %}