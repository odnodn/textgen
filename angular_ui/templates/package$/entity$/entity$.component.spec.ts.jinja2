import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import * as chance from 'chance';
import { TranslateModule } from "@ngx-translate/core";

import { By } from "@angular/platform-browser";
import * as _ from "lodash";

import {ReactiveFormsModule, FormsModule} from '@angular/forms';

import { valid{{ entity.parent.name }}Payload } from "../{{ entity.parent.name | spinal  }}.component.spec";

{% set cname =  (entity.name  ) +'Component'  %}
import { {{ cname }} } from './{{ name | spinal }}.component';

{% macro genFieldTest(entity) %}
    {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}

        {%  if not prop.opt %}
            it('{{ prop.name }} field required validity', () => {
                let errors = {};
                let fld = component.getTheForm().controls['{{ prop.name }}'];

                expect(fld.valid).toBeFalsy();
                errors = fld.errors || {};
                expect(errors['required']).toBeTruthy();
            });
        {% endif %}

        {% for v in prop.validators -%}
            it('{{ prop.name }} field {{ v.name }} validity', () => {
                let errors = {};
                let fld = component.getTheForm().controls['{{ prop.name }}'];

                fld.setValue("to");
                errors = fld.errors || {};
                expect(errors['required']).toBeFalsy();
                expect(errors['{{ v.name }}']).toBeTruthy();
            });
        {% endfor %}


       it('{{ prop.name }} field should be valid', () => {
        // Set field to something correct
        let fld = component.getTheForm().controls['{{ prop.name }}'];
        fld.setValue(entity.{{ prop.name }});
        let errors = fld.errors || {};
        expect(errors).toEqual({});

        });
{#        // {{ prop.name }} : ['', [  {{ getValidators(prop) }} ]],#}
    {% endfor %}
{#    {% for prop in genUtils.getContained(entity) -%}#}
{#        {{ prop.name }} : this.fb.array([ this.create{{ prop.name | fUpper }}Controls() ])#}
{#    {% endfor %}#}
{%  endmacro %}





describe('{{ cname }}', () => {

    let component: {{ cname }};
    let fixture: ComponentFixture<{{ cname }}>;
    let entity = valid{{ entity.parent.name }}Payload


    beforeEach(async(() => {
        TestBed.configureTestingModule({
        //declarations: [ {{ cname }} ],
        imports: [ReactiveFormsModule,
FormsModule,
TranslateModule.forRoot()
],

    })
        .compileComponents();
    }));

    beforeEach(() => {
        fixture = TestBed.createComponent({{ cname }});
        component = fixture.componentInstance;
        fixture.detectChanges();
    });

    it('should create', () => {
        expect(component).toBeTruthy();
    });

    it('form invalid when empty', () => {
        expect(component.getTheForm().valid).toBeFalsy();
    });

    {{  genFieldTest(entity) }}


    it("submitting the form emits valid entity", () => {
        expect(component.getTheForm().valid).toBeFalsy();
        component.entity = entity;

        _.forOwn(entity, (value, key) => {
            component.getTheForm().controls[key].setValue(value);
        });

        expect(component.getTheForm().valid).toBeTruthy();

        let output: any;

        // Subscribe to the Observable and store the output in a local variable.
        component.stepComplete.subscribe(value => {
        output = value;
        console.log(value);
        });

        // Trigger the output function
        component.submit();
        fixture.detectChanges();

        // Now we can check to make sure the emitted value is correct
        expect(output).toEqual(entity);
    });

});
