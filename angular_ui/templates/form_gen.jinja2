


{% macro propCommons(prop) %}
    formControlName="{{ prop.name }}"  id="{{ prop.name }}-input"  [ngModel]="entity.{{ prop.name }}"
{% endmacro %}

{%  macro createErrorMessage(prop, containerForm, genUtils) %}
    {% set propGetter =  containerForm +'.get(' + "'" + prop.name  +"'"  +')'  %}
    <div class="alert alert-danger" *ngIf="{{ containerForm }}.get('{{ prop.name }}').errors && {{ containerForm }}.get('{{ prop.name }}').touched">
        {% for v in prop.validators %}
            {% if  v.name =='requiredTrue' %}  <p *ngIf="{{ propGetter }}.errors.requiredTrue" translate>must_be_true !</p> {% endif %}
            {% if  v.name =='requiredFalse' %}  <p *ngIf="{{ propGetter }}.errors.requiredFalse" translate>must_be_false !</p> {% endif %}
            {% if  v.name =='future' %}  <p *ngIf="{{ propGetter }}.errors.future" translate>must_be_in_future</p> {% endif %}
            {% if  v.name =='pattern' %}  <p *ngIf="{{ propGetter }}.errors.pattern" translate>invalid_pattern !</p> {% endif %}
            {% if  v.name =='min' %}  <p *ngIf="{{ propGetter }}.errors.min" translate>must_be_min  {{ v.value }}</p> {% endif %}

        {% endfor %}
        <p *ngIf="{{ propGetter}}.errors.required">Required !</p>
    </div>
{% endmacro %}

{% macro genEnum(prop) %}
    {% if not prop.renderDropdown  %}
    <div>
        {% for literal in prop.type.literals -%}
            <label class="container"><span translate>{{ literal.name }}</span>
                <input value="{{ literal.name|capitalize }}" type="radio" name="{{ prop.name }}" {{ propCommons(prop) }}>
                <span class="checkmark"></span>
            </label>
        {% endfor %}
    </div>
    {%  else %}
    <ng-select {{ propCommons(prop) }}>
        {% for literal in prop.type.literals -%}
            <ng-option value="{{ literal.name|capitalize }}"><span translate>{{ literal.name }}</span></ng-option>
        {% endfor %}
    </ng-select>
    {% endif %}
{% endmacro %}

{% macro renderEntityProps(entity, containerForm, genUtils) %}
    {% for prop in entity.properties -%}
        {% if genUtils.isManyEmbedded(prop) %}
            <div class="card card-block">
                <h4 class="card-title">{{ prop.name | fUpper }}</h4>
                <button type="button" (click)="add{{ prop.name | fUpper }}()">Add {{ prop.name | fUpper }}</button>
                <div formArrayName="{{ prop.name }}"
                     *ngFor="let item of {{ formName }}.get('{{  prop.name }}').controls; let i = index;">
                    <div [formGroupName]="i">
                        {{ renderEntityProps(prop.type , "item" , genUtils) }}
                    </div>
                    <button (click)="remove{{ prop.name | fUpper }}(i)">Remove</button>
                </div>
            </div>
        {% endif %}

        {% if not prop.many %}
            <div class="form-group">
                <label for="{{ prop.name }}-input"><span translate>{{ prop.name }}</span></label>
                {% if genUtils.isSimple(prop) -%}
                    {% if genUtils.isEnum(prop) -%}
                       {{ genEnum(prop) }}

                    {% elif genUtils.isPropOfType(prop, "date") -%}
                        <div class="input-group">
                            <input class="form-control" placeholder="yyyy-mm-dd" {{ propCommons(prop) }}
                                   ngbDatepicker #d_{{ prop.name }}="ngbDatepicker">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" (click)="d_{{ prop.name }}.toggle()" type="button">
                                    <img src="img/calendar-icon.svg" style="width: 1.2rem; height: 1rem; cursor: pointer;"/>
                                </button>
                            </div>
                        </div>
                    {% elif genUtils.isPropOfType(prop, "bool") -%}
                        <div class="btn-group btn-group-toggle" ngbRadioGroup name="radioBasic"
                                {{ propCommons(prop) }}>
                            <label ngbButtonLabel class="btn-primary">
                                <input ngbButton type="radio" [value]="true"> <span translate>Yes</span>
                            </label>
                            <label ngbButtonLabel class="btn-primary">
                                <input ngbButton type="radio" [value]="false"> <span translate>No</span>
                            </label>
                        </div>

                    {% elif genUtils.isNumeric(prop) -%}
                        <input type="number" class="form-control" {{ propCommons(prop) }}>
                    {% elif genUtils.isPropOfType(prop, "text") -%}
                        <textarea formControlName="{{ prop.name }}"
                        ></textarea>
                    {% else -%}
                        <input type="text" class="form-control" {{ propCommons(prop) }}>
                    {% endif -%}

                {% else -%}

                    {% if genUtils.isReference(prop) %}
                        <ng-select [items]="{{ genUtils.asCollection( prop ) }}$ | async"
                                   bindLabel="name"
                                   bindValue="id"
                        >
                        </ng-select>
                    {% endif %}

                {% endif %}
                {{ createErrorMessage(prop, containerForm)  }}
            </div>
        {%  endif %}

    {% endfor %}
{% endmacro %}
