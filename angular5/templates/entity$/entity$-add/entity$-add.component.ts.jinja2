
import {Component, EventEmitter, OnInit, Output} from '@angular/core';
import { Validators, FormGroup, FormBuilder, FormArray } from '@angular/forms';
import {ActivatedRoute, Router} from "@angular/router";

import { {{name}}} from "../{{lname}}";
import { {{name}}Service} from "../{{lname}}.service";
import { BaseAdd } from '../../base/base-add';

{% for t in (genUtils.getOutgoingRefs(entity) + genUtils.getContained(entity) ) |map(attribute='type.name') | unique-%}
    import {{ '{' + t + '}'}} from "@app/{{ t| fLower }}/{{ t | fLower }}";
{% endfor %}


{% autoescape false %}

@Component({
selector: 'app-{{lname}}-add',
templateUrl: './{{lname}}-add.component.html',
styleUrls: ['./{{lname}}-add.component.css']
})
export class {{name}}AddComponent  extends BaseAdd<{{name}}> implements OnInit {

    {{lname}}: {{name}};
    errorMessage: string;
    public {{ entity.name | fLower }}Form: FormGroup;

    {% for prop in genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : {{ prop.type.name }}[]
    {% endfor %}

    constructor(protected {{lname}}Service: {{name}}Service, protected router: Router, private fb: FormBuilder) {
        super({{lname}}Service, router, '{{lname}}s')
        this.createForm();
    }

    {% set formName = 'this.' +  (entity.name | fLower ) +'Form'  %}

    private createForm(): void {
        {{ formName }}= this.fb.group({
        {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
            {{ prop.name }} : ['', [ {% if not prop.opt %} Validators.required {% endif %}]],
        {% endfor %}
        {% for prop in genUtils.getContained(entity) -%}
            {{ prop.name }} : this.fb.array([ this.create{{ prop.name | fUpper }}Controls() ])
        {% endfor %}
        //email: ['', [Validators.required, Validators.email]],
        //password: ['', [Validators.required, Validators.minLength(8)]]
        });
    }

    {% for prop in genUtils.getContained(entity) -%}
    create{{ prop.name | fUpper }}Controls(){
        return this.fb.group({
            {% for prop in genUtils.getAllSimpleProps(prop.type) + genUtils.getOutgoingRefs(prop.type) -%}
                {{ prop.name }} : ['', [Validators.required]],
            {% endfor %}
{#            TODO: how to call recursively in jinja{% for prop in genUtils.getContained(entity) -%}#}
{#                {{ prop.name }} : : this.fb.array([ this.create{{ prop.name | fUpper }}Controls() ])#}
{#            {% endfor %}#}
            //email: ['', [Validators.required, Validators.email]],
            //password: ['', [Validators.required, Validators.minLength(8)]]
            });
    }
    {% endfor %}

    {% for prop in genUtils.getContained(entity) -%}
        add{{  prop.name | fUpper }}(): void {
            ({{ formName }}.get('{{ prop.name }}') as FormArray).push(this.create{{ prop.name | fUpper }}Controls());
        }

        remove{{  prop.name | fUpper }}(index:number){
            ({{ formName }}.get('{{ prop.name }}') as FormArray ).removeAt(index);
        }
    {% endfor %}

    submit(){
        Object.keys({{ formName }}.controls).forEach(field =>
            {{ formName }}.get(field).markAsTouched()
        );
        console.log({{ formName }}.value)
        //console.log("entity", this.entity)
    }

}


{% endautoescape %}