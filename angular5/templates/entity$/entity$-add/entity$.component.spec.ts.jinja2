    import { async, ComponentFixture, TestBed } from '@angular/core/testing';

{% set cname =  (entity.name  ) +'Component'  %}
import { {{ cname }} } from './{{ name |fLower }}.component';

{% macro genFieldTest(entity) %}
    {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
        it('{{ prop.name }} field validity', () => {
        let errors = {};
        let fld = component.getTheForm().controls['{{ prop.name }}'];

        {%  if not prop.opt %}
        expect(fld.valid).toBeFalsy();

        //  field is required
        errors = fld.errors || {};
        expect(errors['required']).toBeTruthy();
        {% endif %}

        {%  if not prop.opt %}
        // Set field to something
        fld.setValue("to");
        errors = fld.errors || {};
        expect(errors['required']).toBeFalsy();
        expect(errors['minlength']).toBeTruthy();
        {% endif %}

        // Set field to something correct
        fld.setValue("toronto");
        errors = fld.errors || {};
        expect(errors).toEqual({});

        });

    {% endfor %}
{#    {% for prop in genUtils.getContained(entity) -%}#}
{#        {{ prop.name }} : this.fb.array([ this.create{{ prop.name | fUpper }}Controls() ])#}
{#    {% endfor %}#}
{%  endmacro %}

import {ReactiveFormsModule, FormsModule} from '@angular/forms';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { NgSelectModule } from '@ng-select/ng-select';
import { QuoteDataImpl } from '@app/quote-data-impl';

describe('{{ cname }}', () => {
let component: {{ cname }};
let fixture: ComponentFixture<{{ cname }}>;
this.entity = {{ lname }}Factory.build();

    beforeEach(async(() => {
        TestBed.configureTestingModule({
        declarations: [ {{ cname }} ],
        imports: [ReactiveFormsModule, FormsModule,NgbModule.forRoot(), NgSelectModule],

    })
        .compileComponents();
    }));

    beforeEach(() => {
        fixture = TestBed.createComponent({{ cname }});
        component = fixture.componentInstance;
        fixture.detectChanges();
    });

    it('should create', () => {
        expect(component).toBeTruthy();
    });

    it('form invalid when empty', () => {
        expect(component.getTheForm().valid).toBeFalsy();
    });

    {{  genFieldTest(entity) }}


    it('submitting a form emits a valid entity', () => {
        expect(component.form.valid).toBeFalsy();

        {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
        component.getTheForm().controls['{{ prop.name }}'].setValue(this.entity.{{ prop.name }})
        {% endfor %}

        expect(component.form.valid).toBeTruthy();

        let emitted: any;
        // Subscribe to the Observable and store the user in a local variable.
        component.stepComplete.subscribe((x:any) => emitted = value);

        // Trigger the login function
        component.submit();

        {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
            expect(user.{{ prop.name }}).toBe(this.entity.{{ prop.name }});
        {% endfor %}

    });
});
