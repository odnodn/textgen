

{% macro propCommons(prop) %}
    formControlName="{{ prop.name }}"  id="{{ prop.name }}-input"   class="form-control"
    [ngClass]="{ 'is-invalid': submitted && f.{{ prop.name }}.errors }"
{% endmacro %}

{%  macro createErrorMessage(prop, containerForm, genUtils) %}
    {% set propGetter =  'f.' +  prop.name  %}
    <{{ genUtils.getBasicTag() }} class="invalid-feedback" *ngIf="submitted && {{ propGetter }}.errors ">
        {% for v in prop.validators %}
            {% if  v.name =='requiredTrue' %}  <p *ngIf="{{ propGetter }}.errors.requiredTrue" translate>must_be_true !</p> {% endif %}
            {% if  v.name =='requiredFalse' %}  <p *ngIf="{{ propGetter }}.errors.requiredFalse" translate>must_be_false !</p> {% endif %}
            {% if  v.name =='future' %}  <p *ngIf="{{ propGetter }}.errors.future" translate>must_be_in_future</p> {% endif %}
            {% if  v.name =='pattern' %}  <p *ngIf="{{ propGetter }}.errors.pattern" > {{  prop.name  }}  is invalid   </p> {% endif %}
            {% if  v.name in ('minLength', 'maxLength', 'min','max') %}  <p *ngIf="{{ propGetter }}.errors.{{ v.name |  lower }}" translate>must_be_  {{ v.value }}</p> {% endif %}
        {% endfor %}
        <p *ngIf="{{ propGetter}}.errors.required">Required !</p>
    </{{ genUtils.getBasicTag() }}>
{% endmacro %}


{% macro renderEntityPropsIonic(entity, containerForm, genUtils) %}
    {% for prop in genUtils.allProps(entity) -%}
        {% if not prop.many %}

            <ion-item>
                <ion-label position="stacked">{{ prop.name | humanize }} {% if not prop.opt -%} * {%  endif %}</ion-label>
                {% if genUtils.isSimple(prop) -%}
                    {{ renderInputControl(prop, containerForm, genUtils)  }}
                {% else %}
                    {{ renderAssociated(prop, containerForm, genUtils)  }}
                {% endif %}
            </ion-item>
            {{ createErrorMessage(prop, containerForm, genUtils)  }}

        {%  endif %}
    {% endfor %}
{% endmacro %}


{%  macro renderAssociated(prop, containerForm, genUtils) %}
    <ion-select placeholder="Select One" {{ propCommons(prop) }}>
        <ion-select-option *ngFor="let e of {{ prop.name }}List$ | async" value="{{ '{{e.id'}}{{'}}'}}">{{ '{{e.name'}}{{'}}' }}</ion-select-option>
    </ion-select>
{% endmacro %}


{% macro renderInputControl(prop, containerForm, genUtils) %}
    {% if genUtils.isEnum(prop) -%}
        <ion-select placeholder="Select One">
            {% for literal in prop.type.literals -%}
                <ion-select-option value="{{ literal.name|capitalize }}">{{ literal.name }}</ion-select-option>
            {% endfor %}
        </ion-select>
    {% elif genUtils.isPropOfType(prop, "date") -%}
        <ion-datetime display-format="MMM DD, YYYY"></ion-datetime>
    {% elif genUtils.isPropOfType(prop, "bool") -%}
        <ion-toggle {{ propCommons(prop) }} ></ion-toggle>
    {% elif genUtils.isNumeric(prop) -%}
        <ion-input  type="number" {{ propCommons(prop) }} ></ion-input>
    {% elif genUtils.isPropOfType(prop, "text") -%}
        <ion-textarea  {{ propCommons(prop) }}></ion-textarea>
    {% elif genUtils.isPropOfType(prop, "file") -%}
        <p> TODO FILE </p>
    {% else -%}
        <ion-input {{ propCommons(prop) }} type="text"> </ion-input>
    {% endif -%}
{% endmacro %}





{% macro renderEntityProps(entity, containerForm, genUtils) %}
    {% for prop in genUtils.allProps(entity) -%}
        {% if genUtils.isManyEmbedded(prop) %}
            <div class="card card-block">
                <h4 class="card-title">{{ prop.name | fUpper }}</h4>
                <button type="button" (click)="add{{ prop.name | fUpper }}()">Add {{ prop.name | fUpper }}</button>
                <div formArrayName="{{ prop.name }}"
                     *ngFor="let item of {{ formName }}.get('{{  prop.name }}').controls; let i = index;">
                    <div [formGroupName]="i">
                        {{ renderEntityProps(prop.type , "item" , genUtils) }}
                    </div>
                    <button (click)="remove{{ prop.name | fUpper }}(i)">Remove</button>
                </div>
            </div>
        {% endif %}

        {% if not prop.many %}
            <div class="form-group">
                <label for="{{ prop.name }}-input"> {% if not prop.opt -%} * {%  endif %}<span translate>{{ prop.name|capitalize }}</span></label>
                {% if genUtils.isSimple(prop) -%}
                    {% if genUtils.isEnum(prop) -%}
                        <ng-select {{ propCommons(prop) }}>
                            {% for literal in prop.type.literals -%}
                                <ng-option value="{{ literal.name|capitalize }}">{{ literal.name }}</ng-option>
                            {% endfor %}
                        </ng-select>

                    {% elif genUtils.isPropOfType(prop, "date") -%}
                        <div class="input-group">
                            <input  placeholder="yyyy-mm-dd" {{ propCommons(prop) }}
                                   ngbDatepicker #d_{{ prop.name }}="ngbDatepicker">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" (click)="d_{{ prop.name }}.toggle()" type="button">
                                    <img src="img/calendar-icon.svg" style="width: 1.2rem; height: 1rem; cursor: pointer;"/>
                                </button>
                            </div>
                        </div>
                    {% elif genUtils.isPropOfType(prop, "bool") -%}
                        <div class="btn-group btn-group-toggle" ngbRadioGroup name="radioBasic"
                                {{ propCommons(prop) }}>
                            <label ngbButtonLabel class="btn-primary">
                                <input ngbButton type="radio" [value]="true"> <span translate>Yes</span>
                            </label>
                            <label ngbButtonLabel class="btn-primary">
                                <input ngbButton type="radio" [value]="false"> <span translate>No</span>
                            </label>
                        </div>

                    {% elif genUtils.isNumeric(prop) -%}
                        <input type="number" {{ propCommons(prop) }} >`
                    {% elif genUtils.isPropOfType(prop, "text") -%}
                        <textarea  {{ propCommons(prop) }} rows="8"
                        ></textarea>
                    {% elif genUtils.isPropOfType(prop, "file") -%}
                        <input type="file"   accept=".png,.jpg"  (change)="upload($event)" {{ propCommons(prop) }} >
                        <progress
                                max="100"
                                *ngIf="(uploadProgress | async); let uploadProgressPercentage"
                                [value]="uploadProgressPercentage"
                        ><span>{{ uploadProgressPercentage }}%</span></progress>


                    {% else -%}

                        <input type="text" {{ propCommons(prop) }}>
                    {% endif -%}

                {% else -%}

                    {% if genUtils.isReference(prop) %}
                        <ng-select [items]="{{ genUtils.asCollection( prop ) }}$ | async"
                                   bindLabel="name"
                                   bindValue="id"
                        >
                        </ng-select>
                    {% endif %}

                {% endif %}
                {{ createErrorMessage(prop, containerForm)  }}
            </div>
        {%  endif %}

    {% endfor %}
{% endmacro %}
