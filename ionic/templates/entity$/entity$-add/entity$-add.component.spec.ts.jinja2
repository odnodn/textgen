import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import {  {{ lname }}Factory } from '../{{ lname }}';

{% set cname =  (entity.name  ) +'AddComponent'  %}
import { {{ cname }} } from './{{ name |fLower }}-add.component';

{% macro genFieldTest(entity) %}
    {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
        it('{{ prop.name }} field validity', () => {
        let errors = {};
        let fld = component.getTheForm().controls['{{ prop.name }}'];

        {%  if not prop.opt %}
        expect(fld.valid).toBeFalsy();

        //  field is required
        errors = fld.errors || {};
        expect(errors['required']).toBeTruthy();
        {% endif %}

        {%  if not prop.opt %}
        // Set field to something
        fld.setValue("to");
        errors = fld.errors || {};
        expect(errors['required']).toBeFalsy();
        expect(errors['minlength']).toBeTruthy();
        {% endif %}

        // Set field to something correct
        fld.setValue("toronto");
        errors = fld.errors || {};
        expect(errors).toEqual({});

        });

    {% endfor %}
{#    {% for prop in genUtils.getContained(entity) -%}#}
{#        {{ prop.name }} : this.fb.array([ this.create{{ prop.name | fUpper }}Controls() ])#}
{#    {% endfor %}#}
{%  endmacro %}

import {ReactiveFormsModule, FormsModule} from '@angular/forms';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { NgSelectModule } from '@ng-select/ng-select';

describe('{{ cname }}', () => {
let component: {{ cname }};
let fixture: ComponentFixture<{{ cname }}>;


    beforeEach(async(() => {
        TestBed.configureTestingModule({
        declarations: [ {{ cname }} ],
        imports: [ReactiveFormsModule, FormsModule,NgbModule.forRoot(), NgSelectModule],

    })
        .compileComponents();
    }));

    beforeEach(() => {
        fixture = TestBed.createComponent({{ cname }});
        component = fixture.componentInstance;
        fixture.detectChanges();
        this.entity = {{ lname }}Factory.build();
    });

    it('should create', () => {
        expect(component).toBeTruthy();
    });

    it('form invalid when empty', () => {
        expect(component.getForm().valid).toBeFalsy();
    });

    it('form valid when editing existing', () => {
        component.entity = this.entity
        fixture.detectChanges();
        expect(component.getForm().valid).toBeTruthy();
    });

{#    {{  genFieldTest(entity) }}#}


    it('submitting a form emits a valid entity', () => {
        expect(component.getForm().valid).toBeFalsy();

        {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
        component.getForm().controls['{{ prop.name }}'].setValue(this.entity.{{ prop.name }})
        {% endfor %}

        expect(component.getForm().valid).toBeTruthy();

        component.stepComplete.subscribe((emitted:any) => {
            {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
                expect(emitted.{{ prop.name }}).toBe(this.entity.{{ prop.name }});
            {% endfor %}
        });

        // Trigger the login function
        component.submit();
    });
});
