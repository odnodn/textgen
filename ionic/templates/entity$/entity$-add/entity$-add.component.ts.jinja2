
{% import 'templates/validator_gen.jinja2' as vg %}

import {Component, EventEmitter, OnInit, Output} from '@angular/core';
import { Validators, FormGroup, FormBuilder, FormArray } from '@angular/forms';
import {ActivatedRoute, Router} from "@angular/router";

import { {{name}}} from "../{{lname}}";

import { BaseFormComponent } from '@app/base/base-form.component';

{% for t in (genUtils.getOutgoingRefs(entity) + genUtils.getContained(entity) ) |map(attribute='type.name') | unique-%}
    import {{ '{' + t + '}'}} from "@app/{{ t| fLower }}/{{ t | fLower }}";
{% endfor %}



{% macro genFormControls(entity) %}
    {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : ['', [  {{ vg.getValidators(prop, genUtils) }} ]],
    {% endfor %}
    {% for prop in genUtils.getContained(entity) -%}
        {{ prop.name }} : this.fb.array([ this.create{{ prop.name | fUpper }}Controls() ])
    {% endfor %}
{%  endmacro %}


{% autoescape false %}

@Component({
selector: 'app-{{lname}}-add',
templateUrl: './{{lname}}-add.component.html',
styleUrls: ['./{{lname}}-add.component.css']
})
export class {{name}}AddComponent  extends BaseFormComponent<{{name}}> implements OnInit {

    //{{lname}}: {{name}};

    public {{ entity.name | fLower }}Form: FormGroup;

    {% for prop in genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : {{ prop.type.name }}[]
    {% endfor %}


    constructor( private fb: FormBuilder) {
        super()
        this.createForm();
    }

    {% set formName = 'this.' +  (entity.name | fLower ) +'Form'  %}

    private createForm(): void {
        {{ formName }}= this.fb.group({
        {{ genFormControls(entity) }}
        });
    }

    {% for prop in genUtils.getContained(entity) -%}
    create{{ prop.name | fUpper }}Controls(){
        return this.fb.group({
        {{ genFormControls(prop.type) }}
            });
    }
    {% endfor %}

    {% for prop in genUtils.getContained(entity) -%}
        add{{  prop.name | fUpper }}(): void {
            ({{ formName }}.get('{{ prop.name }}') as FormArray).push(this.create{{ prop.name | fUpper }}Controls());
        }

        remove{{  prop.name | fUpper }}(index:number){
            ({{ formName }}.get('{{ prop.name }}') as FormArray ).removeAt(index);
        }
    {% endfor %}


    getForm  () { return {{ formName }} };

    submit(){
        super.onSubmit(this.entity);
    }

}
{% endautoescape %}