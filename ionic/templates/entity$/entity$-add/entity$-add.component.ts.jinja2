
{% import 'templates/validator_gen.jinja2' as vg %}

import { Component, OnInit } from "@angular/core";

import { Location } from "@angular/common";

import { FormBuilder, Validators, FormGroup } from "@angular/forms";
import { {{name}}Service } from "../{{lname}}.service";
import { Router, ActivatedRoute } from "@angular/router";
import { BaseAddEditPage } from '../../../base/base-add-edit-page';


{#//import { {{name}}} from "../{{lname}}";#}
{#//import { BaseFormComponent } from '@app/base/base-form.component';#}

{% for t in (genUtils.getOutgoingRefs(entity) + genUtils.getContained(entity) ) |map(attribute='type.name') | unique-%}
    import {{ '{' + t + '}'}} from "@app/{{ t| fLower }}/{{ t | fLower }}";
{% endfor %}



{% macro genFormControls(entity) %}
    {% for prop in genUtils.getAllSimpleProps(entity) + genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : ['', [  {{ vg.getValidators(prop, genUtils) }} ]],
    {% endfor %}
    {% for prop in genUtils.getContained(entity) -%}
        {{ prop.name }} : this.formBuilder.array([ this.create{{ prop.name | fUpper }}Controls() ])
    {% endfor %}
{%  endmacro %}


{% autoescape false %}

@Component({
selector: 'app-{{lname}}-add',
templateUrl: './{{lname}}-add.component.html',
styleUrls: ['./{{lname}}-add.component.scss']
})
export class {{name}}AddComponent  extends  BaseAddEditPage implements OnInit {

    {% for prop in genUtils.getOutgoingRefs(entity) -%}
        {{ prop.name }} : {{ prop.type.name }}[]
    {% endfor %}

    constructor(
        protected formBuilder: FormBuilder,
        protected service: ChronicConditionService,
        protected activatedRoute: ActivatedRoute,
        protected location: Location,
        protected router: Router
    ) {
        super(formBuilder, service, activatedRoute, location, router);
    }


    {% set formName = 'this.' +  (entity.name | fLower ) +'Form'  %}

    createForm(): void {
        this.form = this.formBuilder.group({
        {{ genFormControls(entity) }}
        });
    }

    {% for prop in genUtils.getContained(entity) -%}
    create{{ prop.name | fUpper }}Controls(){
        return this.formBuilder.group({
        {{ genFormControls(prop.type) }}
            });
    }
    {% endfor %}

    {% for prop in genUtils.getContained(entity) -%}
        add{{  prop.name | fUpper }}(): void {
            ({{ formName }}.get('{{ prop.name }}') as FormArray).push(this.create{{ prop.name | fUpper }}Controls());
        }

        remove{{  prop.name | fUpper }}(index:number){
            ({{ formName }}.get('{{ prop.name }}') as FormArray ).removeAt(index);
        }
    {% endfor %}

    ngOnInit() {

    }

    getForm  () { return this.form };


}
{% endautoescape %}


